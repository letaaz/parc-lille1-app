package com.example.letaaz.parclille1.data

import android.arch.persistence.db.SupportSQLiteDatabase
import android.arch.persistence.room.Database
import android.arch.persistence.room.Room
import android.arch.persistence.room.RoomDatabase
import android.arch.persistence.room.RoomMasterTable.TABLE_NAME
import android.arch.persistence.room.TypeConverters
import android.arch.persistence.room.migration.Migration
import android.content.Context
import android.os.AsyncTask

@Database(entities = arrayOf(Probleme::class), version = 1, exportSchema = true)
@TypeConverters(LatLngTypeConverter::class)
abstract class AppDatabase : RoomDatabase(){

    /*
    Implementation is auto generated by Room
    Returns a singleton referring to the DAO for the Problem
     */
    abstract fun problemeDAO() : ProblemeDAO

    companion object {
        @Volatile
        private var instance: AppDatabase? = null
        //val MIGRATION_1_2 = Migration1to2()
        val DB_NAME = "ParcLille1DB"

        /*
        Returns the single instance of AppDatabase among the app
         */
        fun getDatabase(context: Context): AppDatabase {
            if (instance == null) {
                synchronized(AppDatabase::class.java) {
                    if (instance == null) {
                        instance = Room.databaseBuilder(context.applicationContext,
                                AppDatabase::class.java, DB_NAME)
                                // .addMigrations(MIGRATION_1_2)
                                .addCallback(object : RoomDatabase.Callback() {
                                    override fun onCreate(db: SupportSQLiteDatabase) {
                                        PopulateDbAsync(instance!!).execute()
                                    }
                                })
                                .build()
                    }
                }
            }
            return instance!!
        }
    }
}

class PopulateDbAsync(db : AppDatabase) : AsyncTask<Void, Void, Void> () {
    private val mDao: ProblemeDAO = db.problemeDAO()

    /*
    Initializing the database right after its creation
     */
    override fun doInBackground(vararg p0: Void?): Void? {
        mDao.removeAllProblemes()
        return null
    }
}


